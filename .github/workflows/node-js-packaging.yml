name: Node.js builds
env:
  DEBUG: napi:*
  APP_NAME: cpp-linter
  MACOSX_DEPLOYMENT_TARGET: '10.13'
permissions:
  contents: write
  id-token: write
on:
  push:
    branches: [main]
    paths:
      - cpp-linter/**.{rs,toml}
      - node-binding/**
      - Cargo.{toml,lock}
      - '**package.json'
      - yarn.lock
      - .github/workflows/node-js-packaging.yml
    tags:
      - '*'
  pull_request:
    branches: [main]
    paths:
      - cpp-linter/**.{rs,toml}
      - node-binding/**
      - Cargo.{toml,lock}
      - '**package.json'
      - yarn.lock
      - .github/workflows/node-js-packaging.yml

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: yarn build --target x86_64-apple-darwin --features openssl-vendored
          - host: windows-latest
            build: yarn build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: yarn build --target x86_64-unknown-linux-gnu --features openssl-vendored
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          cache: yarn
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target == 'armv7-unknown-linux-musleabihf' }}
        with:
          version: 0.13.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        working-directory: node-binding
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        working-directory: node-binding
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          cache: yarn
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: >-
            --user 0:0
            -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db
            -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache
            -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index
            -v ${{ github.workspace }}:/build
            -w /build
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        working-directory: node-binding
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: node-binding/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - '18'
          - '20'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          architecture: x64
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: node-binding
      - name: List packages
        run: ls -R .
        working-directory: node-binding
        shell: bash
      - name: Test bindings
        run: yarn test
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
          - '20'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: node-binding
      - name: List packages
        run: ls -R .
        working-directory: node-binding
        shell: bash
      - name: Test bindings
        run: >-
          docker run --rm
          -v $(pwd):/build
          -w /build
          node:${{ matrix.node }}-slim
          yarn test
  publish:
    name: Publish
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: node-binding/artifacts
      - name: Move artifacts
        working-directory: node-binding
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        working-directory: node-binding
        shell: bash
      - name: Publish
        working-directory: node-binding
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public --provenance true ${{ contains(github.ref_name, '-rc') && '--tag next' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      # - name: Upload release assets
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run:
      #     files=$(ls ./npm/**cpp-linter.*.node)
      #     gh release upload ${{ github.ref_name }} $files
